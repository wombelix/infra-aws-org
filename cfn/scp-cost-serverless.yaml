# SPDX-FileCopyrightText: 2025 Dominik Wombacher <dominik@wombacher.cc>
#
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: '2010-09-09'
Description: "Service Control Policies for AWS Organizations - Cost optimization policies for serverless services"

Parameters:
  OrganizationRootId:
    Type: String
    Description: "AWS Organizations root ID (e.g., r-xxxx)"

Resources:
  # =============================================================================
  # COST OPTIMIZATION POLICIES - SERVERLESS SERVICES
  # =============================================================================

  # Restricts high-cost Lambda features while allowing standard serverless execution
  # Why: Prevents provisioned concurrency and other fixed-cost features that break serverless cost model
  DenyHighCostLambdaFeatures:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::Organizations::Policy
    Properties:
      Type: SERVICE_CONTROL_POLICY
      Name: DenyHighCostLambdaFeatures
      Description: |
        Restrict high-cost Lambda features - allow only pay-per-use services (on-demand, standard execution).
        See: https://docs.aws.amazon.com/lambda/latest/dg/best-practices.html
      Content:
        Version: 2012-10-17
        Statement:
          - Sid: DenyProvisionedConcurrency
            Effect: Deny
            Action:
              - 'lambda:CreateProvisionedConcurrencyConfig'
              - 'lambda:UpdateProvisionedConcurrencyConfig'
              - 'lambda:PutProvisionedConcurrencyConfig'
            Resource: '*'
          - Sid: DenyProvisionedModeESM
            Effect: Deny
            Action:
              - 'lambda:CreateEventSourceMapping'
              - 'lambda:UpdateEventSourceMapping'
            Resource: '*'
            Condition:
              'Null':
                'lambda:ProvisionedPollerConfig': 'false'
          - Sid: DenyLambdaEdge
            Effect: Deny
            Action:
              - 'lambda:CreateFunction'
              - 'lambda:UpdateFunctionCode'
              - 'lambda:UpdateFunctionConfiguration'
            Resource: '*'
            Condition:
              StringLike:
                'lambda:FunctionArn': 'arn:aws:lambda:us-east-1:*:function:*'
              StringEquals:
                'lambda:Principal': 'edgelambda.amazonaws.com'
      TargetIds:
        - !Ref OrganizationRootId

  # Restricts high-cost DynamoDB features while allowing on-demand capacity
  # Why: Forces pay-per-request billing and prevents expensive provisioned capacity
  DenyHighCostDynamoDBFeatures:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::Organizations::Policy
    Properties:
      Type: SERVICE_CONTROL_POLICY
      Name: DenyHighCostDynamoDBFeatures
      Description: |
        Restrict high-cost DynamoDB features - allow only on-demand capacity mode and basic operations.
        See: https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/best-practices.html
      Content:
        Version: 2012-10-17
        Statement:
          - Sid: DenyProvisionedCapacity
            Effect: Deny
            Action:
              - 'dynamodb:CreateTable'
              - 'dynamodb:ModifyTable'
              - 'dynamodb:UpdateTable'
            Resource: '*'
            Condition:
              StringNotEquals:
                'dynamodb:BillingMode': 'PAY_PER_REQUEST'
          - Sid: DenyReservedCapacity
            Effect: Deny
            Action:
              - 'dynamodb:PurchaseReservedCapacityOfferings'
              - 'dynamodb:DescribeReservedCapacity'
              - 'dynamodb:DescribeReservedCapacityOfferings'
            Resource: '*'
          - Sid: DenyGlobalTables
            Effect: Deny
            Action:
              - 'dynamodb:CreateGlobalTable'
              - 'dynamodb:UpdateGlobalTable'
              - 'dynamodb:CreateReplicationGroup'
            Resource: '*'
          - Sid: DenyDAX
            Effect: Deny
            Action:
              - 'dax:*'
            Resource: '*'
      TargetIds:
        - !Ref OrganizationRootId

  # Forces usage of HTTP APIs by blocking REST APIs and Private APIs
  # Why: HTTP APIs are significantly cheaper than REST APIs for most use cases
  DenyHighCostAPIGatewayFeatures:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::Organizations::Policy
    Properties:
      Type: SERVICE_CONTROL_POLICY
      Name: DenyHighCostAPIGatewayFeatures
      Description: |
        Force usage of HTTP APIs by blocking REST APIs and Private APIs for cost optimization.
        See: https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html
      Content:
        Version: 2012-10-17
        Statement:
          - Sid: DenyRESTAPIs
            Effect: Deny
            Action:
              - 'apigateway:CreateRestApi'
              - 'apigateway:ImportRestApi'
              - 'apigateway:CloneRestApi'
              - 'apigateway:PutRestApi'
            Resource: '*'
          - Sid: DenyPrivateAPIs
            Effect: Deny
            Action:
              - 'apigateway:CreateRestApi'
              - 'apigateway:ImportRestApi'
            Resource: '*'
            Condition:
              StringEquals:
                'apigateway:Request/EndpointType': 'PRIVATE'
          - Sid: DenyVPCEndpoints
            Effect: Deny
            Action:
              - 'ec2:CreateVpcEndpoint'
            Resource: '*'
            Condition:
              StringEquals:
                'ec2:VpceServiceName': 'com.amazonaws.*.execute-api'
      TargetIds:
        - !Ref OrganizationRootId

  # Forces Express Workflows and blocks compute-heavy integrations
  # Why: Express workflows are cheaper and maintain serverless cost model
  DenyHighCostStepFunctionsFeatures:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::Organizations::Policy
    Properties:
      Type: SERVICE_CONTROL_POLICY
      Name: DenyHighCostStepFunctionsFeatures
      Description: |
        Force Express Workflows and block compute-heavy integrations to maintain serverless cost model.
        See: https://docs.aws.amazon.com/step-functions/latest/dg/concepts-standard-vs-express.html
      Content:
        Version: 2012-10-17
        Statement:
          - Sid: ForceExpressWorkflows
            Effect: Deny
            Action:
              - 'states:CreateStateMachine'
              - 'states:UpdateStateMachine'
            Resource: '*'
            Condition:
              StringNotEquals:
                'states:StateMachineType': 'EXPRESS'
          - Sid: DenyBatchIntegrations
            Effect: Deny
            Action:
              - 'states:CreateStateMachine'
              - 'states:UpdateStateMachine'
            Resource: '*'
            Condition:
              StringLike:
                'states:Definition': '*arn:aws:states:::batch:*'
          - Sid: DenyEMRIntegrations
            Effect: Deny
            Action:
              - 'states:CreateStateMachine'
              - 'states:UpdateStateMachine'
            Resource: '*'
            Condition:
              StringLike:
                'states:Definition': '*arn:aws:states:::emr:*'
      TargetIds:
        - !Ref OrganizationRootId

  # Restricts high-cost Bedrock features while allowing pay-per-use services
  # Why: Provisioned throughput and custom models can generate significant monthly costs
  DenyHighCostBedrockFeatures:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::Organizations::Policy
    Properties:
      Type: SERVICE_CONTROL_POLICY
      Name: DenyHighCostBedrockFeatures
      Description: |
        Restrict high-cost Bedrock features - allow only pay-per-use services (on-demand, batch).
        See: https://docs.aws.amazon.com/bedrock/latest/userguide/best-practices.html
      Content:
        Version: 2012-10-17
        Statement:
          - Sid: DenyProvisionedThroughput
            Effect: Deny
            Action:
              - 'bedrock:CreateProvisionedModelThroughput'
              - 'bedrock:UpdateProvisionedModelThroughput'
              - 'bedrock:PutProvisionedModelThroughput'
            Resource: '*'
          - Sid: DenyCustomModelImport
            Effect: Deny
            Action:
              - 'bedrock:CreateModelImportJob'
              - 'bedrock:ImportCustomModel'
            Resource: '*'
          - Sid: DenyModelCustomization
            Effect: Deny
            Action:
              - 'bedrock:CreateModelCustomizationJob'
              - 'bedrock:CreateFineTuningJob'
              - 'bedrock:CreateContinuedPreTrainingJob'
            Resource: '*'
          - Sid: DenyMarketplaceModels
            Effect: Deny
            Action:
              - 'bedrock:CreateMarketplaceModelEndpoint'
              - 'bedrock:RegisterMarketplaceModelEndpoint'
              - 'aws-marketplace:Subscribe'
            Resource: '*'
            Condition:
              StringLike:
                'aws:RequestedService': 'bedrock'
          - Sid: DenyHumanEvaluation
            Effect: Deny
            Action:
              - 'bedrock:CreateEvaluationJob'
            Resource: '*'
            Condition:
              StringEquals:
                'bedrock:EvaluationType': 'Human'
          - Sid: DenyDataAutomationCustomOutput
            Effect: Deny
            Action:
              - 'bedrock:InvokeModel'
            Resource: '*'
            Condition:
              StringLike:
                'bedrock:ModelId': '*data-automation*'
              StringEquals:
                'bedrock:OutputType': 'Custom'
      TargetIds:
        - !Ref OrganizationRootId

  # Blocks expensive analytics and messaging services with hourly charges
  # Why: Prevents accidental creation of costly analytics and messaging resources
  DenyExpensiveAnalyticsAndMessaging:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::Organizations::Policy
    Properties:
      Type: SERVICE_CONTROL_POLICY
      Name: DenyExpensiveAnalyticsAndMessaging
      Description: |
        Block expensive analytics and messaging services with hourly charges.
        See: https://docs.aws.amazon.com/glue/latest/dg/dev-endpoint.html
      Content:
        Version: 2012-10-17
        Statement:
          - Sid: DenyGlueDevelopmentEndpoints
            Effect: Deny
            Action:
              - 'glue:CreateDevEndpoint'
            Resource: '*'
          - Sid: DenyAthenaProvisionedCapacity
            Effect: Deny
            Action:
              - 'athena:CreateCapacityReservation'
            Resource: '*'
          - Sid: DenyAmazonMQ
            Effect: Deny
            Action:
              - 'mq:*'
            Resource: '*'
      TargetIds:
        - !Ref OrganizationRootId

Outputs:
  DenyHighCostLambdaFeaturesPolicyId:
    Description: Lambda High-Cost Features Deny SCP Policy ID
    Value: !Ref DenyHighCostLambdaFeatures
    Export:
      Name: !Sub "${AWS::StackName}-DenyHighCostLambdaFeatures-PolicyId"
  DenyHighCostDynamoDBFeaturesPolicyId:
    Description: DynamoDB High-Cost Features Deny SCP Policy ID
    Value: !Ref DenyHighCostDynamoDBFeatures
    Export:
      Name: !Sub "${AWS::StackName}-DenyHighCostDynamoDBFeatures-PolicyId"
  DenyHighCostAPIGatewayFeaturesPolicyId:
    Description: API Gateway High-Cost Features Deny SCP Policy ID
    Value: !Ref DenyHighCostAPIGatewayFeatures
    Export:
      Name: !Sub "${AWS::StackName}-DenyHighCostAPIGatewayFeatures-PolicyId"
  DenyHighCostStepFunctionsPolicyId:
    Description: Step Functions High-Cost Features Deny SCP Policy ID
    Value: !Ref DenyHighCostStepFunctionsFeatures
    Export:
      Name: !Sub "${AWS::StackName}-DenyHighCostStepFunctionsFeatures-PolicyId"
  DenyHighCostBedrockFeaturesPolicyId:
    Description: Bedrock High-Cost Features Deny SCP Policy ID
    Value: !Ref DenyHighCostBedrockFeatures
    Export:
      Name: !Sub "${AWS::StackName}-DenyHighCostBedrockFeatures-PolicyId"
  DenyExpensiveAnalyticsAndMessagingPolicyId:
    Description: Expensive Analytics and Messaging Deny SCP Policy ID
    Value: !Ref DenyExpensiveAnalyticsAndMessaging
    Export:
      Name: !Sub "${AWS::StackName}-DenyExpensiveAnalyticsAndMessaging-PolicyId"
